package org.bastien.addon.model.constant;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

import java.util.Arrays;

@Getter
@RequiredArgsConstructor
public enum Discipline {
    SHIELD_TECH("2031339142381604"), ADVANCED_PROTOTYPE("2031339142381605"), PYROTECH("2031339142381602"), // Powertech
    SHIELD_SPECIALIST("2031339142381641"), TACTICS("2031339142381640"), PLASMATECH("2031339142381638"), // Vanguard
    BODYGUARD("2031339142381600"), ARSENAL("2031339142381601"), INNOVATIVE_ORDNANCE("2031339142381598"), // Mercenary
    COMBAT_MEDIC("2031339142381637"), GUNNERY("2031339142381636"), ASSAULT_SPECIALIST("2031339142381634"), // Commando
    MARKSMANSHIP("2031339142381591"), ENGINEERING("2031339142381592"), VIRULENCE("2031339142381589"), // Sniper
    SHARPSHOOTER("2031339142381627"), SABOTEUR("2031339142381628"), DIRTY_FIGHTING("2031339142381625"), // Gunslinger
    MEDICINE("2031339142381596"), CONCEALMENT("2031339142381595"), LETHALITY("2031339142381593"), // Operative
    SAWBONES("2031339142381631"), SCRAPPER("2031339142381632"), RUFFIAN("2031339142381629"), // Scoundrel
    CORRUPTION("2031339142381587"), LIGHTNING("2031339142381586"), MADNESS("2031339142381584"), // Sorcerer
    SEER("2031339142381619"), TELEKINETICS("2031339142381618"), BALANCE("2031339142381616"), // Sage
    DARKNESS("2031339142381582"), DECEPTION("2031339142381583"), HATRED("2031339142381580"), // Assassin
    KINETIC_COMBAT("2031339142381622"), INFILTRATION("2031339142381620"), SERENITY("2031339142381623"), // Shadow
    IMMORTAL("2031339142381577"), VENGEANCE("2031339142381576"), RAGE("2031339142381578"), // Juggernaut
    DEFENSE("2031339142381609"), VIGILANCE("2031339142381610"), FOCUS("2031339142381607"), // Guardian
    ANNIHILATION("2031339142381572"), CARNAGE("2031339142381573"), FURY("2031339142381574"), // Marauder
    WATCHMAN("2031339142381614"), COMBAT("2031339142381613"), CONCENTRATION("2031339142381611"), // Sentinel
    UNDEFINED_DISCIPLINE("0");

    private final String id;

    public static Discipline find(String id) {
        return Arrays.stream(Discipline.values())
                .filter(item -> item.id.equals(id))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("No discipline found with id " + id));
    }
}
